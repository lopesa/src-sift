// Generated by Xata Codegen 0.28.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "resource_source",
    columns: [{ name: "name", type: "string", unique: true }],
    revLinks: [
      { column: "source", table: "resource_item" },
      { column: "resource_source", table: "resource_source_updates" },
    ],
  },
  {
    name: "resource_item",
    columns: [
      { name: "source", type: "link", link: { table: "resource_source" } },
      { name: "keywords", type: "multiple" },
      { name: "title", type: "string" },
      { name: "description", type: "text" },
      { name: "distribution", type: "json" },
      { name: "full_data", type: "json" },
      { name: "data_types_by_file_extension", type: "multiple" },
    ],
  },
  {
    name: "resource_source_updates",
    columns: [
      {
        name: "resource_source",
        type: "link",
        link: { table: "resource_source" },
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type ResourceSource = InferredTypes["resource_source"];
export type ResourceSourceRecord = ResourceSource & XataRecord;

export type ResourceItem = InferredTypes["resource_item"];
export type ResourceItemRecord = ResourceItem & XataRecord;

export type ResourceSourceUpdates = InferredTypes["resource_source_updates"];
export type ResourceSourceUpdatesRecord = ResourceSourceUpdates & XataRecord;

export type DatabaseSchema = {
  resource_source: ResourceSourceRecord;
  resource_item: ResourceItemRecord;
  resource_source_updates: ResourceSourceUpdatesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Tony-Lopes-s-workspace-hk8d1k.us-east-1.xata.sh/db/resource-browser",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
